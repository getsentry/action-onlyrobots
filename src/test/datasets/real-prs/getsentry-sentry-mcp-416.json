{
  "id": "getsentry/sentry-mcp#416",
  "url": "https://github.com/getsentry/sentry-mcp/pull/416",
  "repo": "getsentry/sentry-mcp",
  "prNumber": 416,
  "title": "fix: improve error handling in search_events agent",
  "description": "## Summary\n\nImprove error handling in the search_events agent to prevent crashes when the AI SDK fails to parse responses.\n\n## Changes\n\n### Bug Fixes\n- Wrap `experimental_output` access in try-catch to handle `AI_NoObjectGeneratedError` gracefully\n- Return safe error objects instead of throwing exceptions when AI parsing fails\n- Make `query` field optional in `QueryTranslationResult` interface (not needed when there's an error)\n- Simplify error responses to only include the `error` field\n\n### Test Updates\n- Enhanced `mockAIResponse` helper to accept custom sort and timeRange parameters\n- Fixed test that was using an incorrect mock structure\n\n## Impact\n\nThis change prevents the search_events tool from crashing with \"No object generated\" errors when the AI SDK fails to parse the model's response. Errors are now properly propagated through the system for better user feedback.\n\nFixes MCP-SERVER-ECD\n\n## Related\n\n- Issue #415: Seer AI analysis suggestions may not always be accurate (the suggestion to add `maxToolRoundtrips` was incorrect)",
  "author": "dcramer",
  "createdAt": "2025-07-22T02:37:59Z",
  "files": [
    {
      "filename": "packages/mcp-server/src/tools/search-events.test.ts",
      "patch": "@@ -24,6 +24,8 @@ describe(\"search_events\", () => {\n     query = \"test query\",\n     fields?: string[],\n     errorMessage?: string,\n+    sort?: string,\n+    timeRange?: { statsPeriod: string } | { start: string; end: string },\n   ) => {\n     const defaultFields = {\n       errors: [\"issue\", \"title\", \"project\", \"timestamp\", \"level\", \"message\"],\n@@ -50,7 +52,8 @@ describe(\"search_events\", () => {\n           dataset,\n           query,\n           fields: fields || defaultFields[dataset],\n-          sort: defaultSorts[dataset],\n+          sort: sort || defaultSorts[dataset],\n+          ...(timeRange && { timeRange }),\n         };\n \n     return {\n@@ -310,16 +313,16 @@ describe(\"search_events\", () => {\n \n   it(\"should correctly handle user agent queries\", async () => {\n     // Mock AI response for user agent query in spans dataset\n-    mockGenerateText.mockResolvedValueOnce({\n-      experimental_output: {\n-        dataset: \"spans\",\n-        query: \"has:mcp.tool.name AND has:user_agent.original\",\n-        fields: [\"user_agent.original\", \"count()\"],\n-        sort: \"-count()\",\n-        timeRange: { statsPeriod: \"24h\" },\n-      },\n-      warnings: [],\n-    });\n+    mockGenerateText.mockResolvedValueOnce(\n+      mockAIResponse(\n+        \"spans\",\n+        \"has:mcp.tool.name AND has:user_agent.original\",\n+        [\"user_agent.original\", \"count()\"],\n+        undefined,\n+        \"-count()\",\n+        { statsPeriod: \"24h\" },\n+      ),\n+    );\n \n     // Mock the Sentry API response\n     mswServer.use("
    },
    {
      "filename": "packages/mcp-server/src/tools/search-events/agent.ts",
      "patch": "@@ -7,9 +7,9 @@ import { lookupOtelSemantics } from \"./tools/otel-semantics-lookup\";\n \n // Type definitions\n export interface QueryTranslationResult {\n-  query: string;\n+  query?: string;\n   fields?: string[];\n-  sort: string;\n+  sort?: string;\n   timeRange?:\n     | {\n         statsPeriod: string;\n@@ -498,79 +498,93 @@ Fix the issue and try again with the corrected query.`;\n     },\n     temperature: 0.1, // Low temperature for more consistent translations\n     experimental_output: Output.object({\n-      schema: z.object({\n-        dataset: z\n-          .enum([\"spans\", \"errors\", \"logs\"])\n-          .optional()\n-          .describe(\"Which dataset to use for the query\"),\n-        query: z\n-          .string()\n-          .optional()\n-          .describe(\n-            \"The Sentry query string for filtering results (empty string returns all recent events)\",\n-          ),\n-        fields: z\n-          .array(z.string())\n-          .optional()\n-          .describe(\n-            \"Array of field names to return in results. REQUIRED for aggregate queries (include only aggregate functions and groupBy fields). Optional for individual event queries (will use recommended fields if not provided).\",\n-          ),\n-        sort: z\n-          .string()\n-          .optional()\n-          .describe(\n-            \"REQUIRED: Sort parameter for results (e.g., '-timestamp' for newest first, '-count()' for highest count first)\",\n-          ),\n-        timeRange: z\n-          .union([\n-            z.object({\n-              statsPeriod: z\n-                .string()\n-                .describe(\"Relative time period like '1h', '24h', '7d'\"),\n-            }),\n-            z.object({\n-              start: z.string().describe(\"ISO 8601 start time\"),\n-              end: z.string().describe(\"ISO 8601 end time\"),\n-            }),\n-          ])\n-          .optional()\n-          .describe(\n-            \"Time range for filtering events. Use either statsPeriod for relative time or start/end for absolute time.\",\n-          ),\n-        error: z\n-          .string()\n-          .optional()\n-          .describe(\"Error message if the query cannot be translated\"),\n-      }).superRefine((data, ctx) => {\n-        if (!data.error) { // If no error is present, dataset and sort must be defined\n-          if (data.dataset === undefined) {\n-            ctx.addIssue({\n-              code: z.ZodIssueCode.custom,\n-              message: \"Dataset is required when no error is returned.\",\n-              path: [\"dataset\"]\n-            });\n+      schema: z\n+        .object({\n+          dataset: z\n+            .enum([\"spans\", \"errors\", \"logs\"])\n+            .optional()\n+            .describe(\"Which dataset to use for the query\"),\n+          query: z\n+            .string()\n+            .optional()\n+            .describe(\n+              \"The Sentry query string for filtering results (empty string returns all recent events)\",\n+            ),\n+          fields: z\n+            .array(z.string())\n+            .optional()\n+            .describe(\n+              \"Array of field names to return in results. REQUIRED for aggregate queries (include only aggregate functions and groupBy fields). Optional for individual event queries (will use recommended fields if not provided).\",\n+            ),\n+          sort: z\n+            .string()\n+            .optional()\n+            .describe(\n+              \"REQUIRED: Sort parameter for results (e.g., '-timestamp' for newest first, '-count()' for highest count first)\",\n+            ),\n+          timeRange: z\n+            .union([\n+              z.object({\n+                statsPeriod: z\n+                  .string()\n+                  .describe(\"Relative time period like '1h', '24h', '7d'\"),\n+              }),\n+              z.object({\n+                start: z.string().describe(\"ISO 8601 start time\"),\n+                end: z.string().describe(\"ISO 8601 end time\"),\n+              }),\n+            ])\n+            .optional()\n+            .describe(\n+              \"Time range for filtering events. Use either statsPeriod for relative time or start/end for absolute time.\",\n+            ),\n+          error: z\n+            .string()\n+            .optional()\n+            .describe(\"Error message if the query cannot be translated\"),\n+        })\n+        .superRefine((data, ctx) => {\n+          if (!data.error) {\n+            // If no error is present, dataset and sort must be defined\n+            if (data.dataset === undefined) {\n+              ctx.addIssue({\n+                code: z.ZodIssueCode.custom,\n+                message: \"Dataset is required when no error is returned.\",\n+                path: [\"dataset\"],\n+              });\n+            }\n+            if (data.sort === undefined) {\n+              ctx.addIssue({\n+                code: z.ZodIssueCode.custom,\n+                message: \"Sort is required when no error is returned.\",\n+                path: [\"sort\"],\n+              });\n+            }\n           }\n-          if (data.sort === undefined) {\n-            ctx.addIssue({\n-              code: z.ZodIssueCode.custom,\n-              message: \"Sort is required when no error is returned.\",\n-              path: [\"sort\"]\n-            });\n-          }\n-        }\n-      }),\n+        }),\n     }),\n     experimental_telemetry: {\n       isEnabled: true,\n       functionId: \"search_events_agent\",\n     },\n   });\n \n-  const parsed = result.experimental_output;\n+  let parsed: any;\n+  try {\n+    parsed = result.experimental_output;\n+  } catch (error) {\n+    // If the AI SDK failed to parse the output, return a safe error object\n+    const errorMessage = error instanceof Error ? error.message : String(error);\n+\n+    // Return a safe error response that matches our schema\n+    return {\n+      error: `AI failed to generate a valid query translation. This may happen when the query is too complex or ambiguous. Please try rephrasing your query. Details: ${errorMessage}`,\n+    };\n+  }\n \n   return {\n     dataset: parsed.dataset,\n-    query: parsed.query || \"\",\n+    query: parsed.query,\n     fields: parsed.fields,\n     sort: parsed.sort,\n     timeRange: parsed.timeRange,"
    }
  ],
  "context": {
    "title": "fix: improve error handling in search_events agent",
    "description": "## Summary\n\nImprove error handling in the search_events agent to prevent crashes when the AI SDK fails to parse responses.\n\n## Changes\n\n### Bug Fixes\n- Wrap `experimental_output` access in try-catch to handle `AI_NoObjectGeneratedError` gracefully\n- Return safe error objects instead of throwing exceptions when AI parsing fails\n- Make `query` field optional in `QueryTranslationResult` interface (not needed when there's an error)\n- Simplify error responses to only include the `error` field\n\n### Test Updates\n- Enhanced `mockAIResponse` helper to accept custom sort and timeRange parameters\n- Fixed test that was using an incorrect mock structure\n\n## Impact\n\nThis change prevents the search_events tool from crashing with \"No object generated\" errors when the AI SDK fails to parse the model's response. Errors are now properly propagated through the system for better user feedback.\n\nFixes MCP-SERVER-ECD\n\n## Related\n\n- Issue #415: Seer AI analysis suggestions may not always be accurate (the suggestion to add `maxToolRoundtrips` was incorrect)",
    "commitMessages": [
      "fix: improve error handling in search_events agent\n\n- Wrap experimental_output access in try-catch to handle AI SDK parsing errors\n- Return safe error objects instead of throwing exceptions\n- Make query field optional in QueryTranslationResult interface\n- Simplify error responses to only include necessary fields\n\nThis prevents crashes when the AI fails to generate valid output and ensures\nerrors are properly propagated through the system.\n\nFixes MCP-SERVER-ECD"
    ]
  },
  "metadata": {
    "isAI": true,
    "tool": "Claude Code",
    "addedBy": "dcramer",
    "addedAt": "2025-07-22T02:47:00.978Z"
  }
}
