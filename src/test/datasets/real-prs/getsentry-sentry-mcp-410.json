{
  "id": "getsentry/sentry-mcp#410",
  "url": "https://github.com/getsentry/sentry-mcp/pull/410",
  "repo": "getsentry/sentry-mcp",
  "prNumber": 410,
  "title": "fix: handle UserInputError in search-events AI tools",
  "description": "## Summary\n- Fix AI_NoObjectGeneratedError by handling UserInputError in search-events AI tools\n- Prevent malformed JSON responses when Sentry API permission errors occur\n\n## Changes\n\n### Bug Fixes\n- Add try-catch blocks to `createOtelLookupTool` and `createDatasetAttributesTool` \n- Catch `UserInputError` exceptions and return them as parseable error strings\n- Preserve the original error messages from UserInputError for better context\n\nThis prevents the JSON parsing errors that were occurring when 403 permission errors were thrown during AI tool execution. The tools now return error messages that the AI agent can understand and either retry with different parameters or pass meaningful errors back to the user.\n\nFixes [MCP-SERVER-EC5](https://sentry.sentry.io/issues/6756090034/)\n\n---\n*Created with Claude Code*",
  "author": "dcramer",
  "createdAt": "2025-07-20T20:14:55Z",
  "files": [
    {
      "filename": "packages/mcp-server/src/tools/search-events/agent.ts",
      "patch": "@@ -1,7 +1,7 @@\n import { z } from \"zod\";\n import { generateText, tool, Output } from \"ai\";\n import { openai } from \"@ai-sdk/openai\";\n-import { ConfigurationError } from \"../../errors\";\n+import { ConfigurationError, UserInputError } from \"../../errors\";\n import type { SentryApiService } from \"../../api-client\";\n import { lookupOtelSemantics } from \"./tools/otel-semantics-lookup\";\n \n@@ -285,14 +285,21 @@ function createOtelLookupTool(\n         ),\n     }),\n     execute: async ({ namespace, searchTerm, dataset }) => {\n-      return await lookupOtelSemantics(\n-        namespace,\n-        searchTerm,\n-        dataset,\n-        apiService,\n-        organizationSlug,\n-        projectId,\n-      );\n+      try {\n+        return await lookupOtelSemantics(\n+          namespace,\n+          searchTerm,\n+          dataset,\n+          apiService,\n+          organizationSlug,\n+          projectId,\n+        );\n+      } catch (error) {\n+        if (error instanceof UserInputError) {\n+          return `Error: ${error.message}`;\n+        }\n+        throw error;\n+      }\n     },\n   });\n }\n@@ -314,40 +321,41 @@ function createDatasetAttributesTool(\n         .describe(\"The dataset to query attributes for\"),\n     }),\n     execute: async ({ dataset }) => {\n-      const { fetchCustomAttributes } = await import(\"./utils\");\n-      const {\n-        BASE_COMMON_FIELDS,\n-        DATASET_FIELDS,\n-        RECOMMENDED_FIELDS,\n-        NUMERIC_FIELDS,\n-      } = await import(\"./config\");\n-\n-      // Get custom attributes for this dataset\n-      const { attributes: customAttributes, fieldTypes } =\n-        await fetchCustomAttributes(\n-          apiService,\n-          organizationSlug,\n-          dataset,\n-          projectId,\n-        );\n-\n-      // Combine all available fields\n-      const allFields = {\n-        ...BASE_COMMON_FIELDS,\n-        ...DATASET_FIELDS[dataset],\n-        ...customAttributes,\n-      };\n-\n-      const recommendedFields = RECOMMENDED_FIELDS[dataset];\n-\n-      // Combine field types from both static config and dynamic API\n-      const allFieldTypes = { ...fieldTypes };\n-      const staticNumericFields = NUMERIC_FIELDS[dataset] || new Set();\n-      for (const field of staticNumericFields) {\n-        allFieldTypes[field] = \"number\";\n-      }\n-\n-      return `Dataset: ${dataset}\n+      try {\n+        const { fetchCustomAttributes } = await import(\"./utils\");\n+        const {\n+          BASE_COMMON_FIELDS,\n+          DATASET_FIELDS,\n+          RECOMMENDED_FIELDS,\n+          NUMERIC_FIELDS,\n+        } = await import(\"./config\");\n+\n+        // Get custom attributes for this dataset\n+        const { attributes: customAttributes, fieldTypes } =\n+          await fetchCustomAttributes(\n+            apiService,\n+            organizationSlug,\n+            dataset,\n+            projectId,\n+          );\n+\n+        // Combine all available fields\n+        const allFields = {\n+          ...BASE_COMMON_FIELDS,\n+          ...DATASET_FIELDS[dataset],\n+          ...customAttributes,\n+        };\n+\n+        const recommendedFields = RECOMMENDED_FIELDS[dataset];\n+\n+        // Combine field types from both static config and dynamic API\n+        const allFieldTypes = { ...fieldTypes };\n+        const staticNumericFields = NUMERIC_FIELDS[dataset] || new Set();\n+        for (const field of staticNumericFields) {\n+          allFieldTypes[field] = \"number\";\n+        }\n+\n+        return `Dataset: ${dataset}\n \n Available Fields (${Object.keys(allFields).length} total):\n ${Object.entries(allFields)\n@@ -369,6 +377,12 @@ ${Object.keys(allFieldTypes).length > 30 ? `\\n... and ${Object.keys(allFieldType\n IMPORTANT: Only use numeric aggregate functions (avg, sum, min, max, percentiles) with numeric fields. Use count() or count_unique() for non-numeric fields.\n \n Use this information to construct appropriate queries for the ${dataset} dataset.`;\n+      } catch (error) {\n+        if (error instanceof UserInputError) {\n+          return `Error: ${error.message}`;\n+        }\n+        throw error;\n+      }\n     },\n   });\n }"
    }
  ],
  "context": {
    "title": "fix: handle UserInputError in search-events AI tools",
    "description": "## Summary\n- Fix AI_NoObjectGeneratedError by handling UserInputError in search-events AI tools\n- Prevent malformed JSON responses when Sentry API permission errors occur\n\n## Changes\n\n### Bug Fixes\n- Add try-catch blocks to `createOtelLookupTool` and `createDatasetAttributesTool` \n- Catch `UserInputError` exceptions and return them as parseable error strings\n- Preserve the original error messages from UserInputError for better context\n\nThis prevents the JSON parsing errors that were occurring when 403 permission errors were thrown during AI tool execution. The tools now return error messages that the AI agent can understand and either retry with different parameters or pass meaningful errors back to the user.\n\nFixes [MCP-SERVER-EC5](https://sentry.sentry.io/issues/6756090034/)\n\n---\n*Created with Claude Code*",
    "commitMessages": [
      "fix: handle UserInputError in search-events AI tools (Fixes MCP-SERVER-EC5)\n\nAdd error handling to AI agent tools to prevent malformed JSON responses\nwhen Sentry API permission errors occur. The tools now catch UserInputError\nand return the error message as a string that the AI can parse and act upon.\n\nThis prevents the AI_NoObjectGeneratedError that was occurring when 403\npermission errors were thrown during tool execution."
    ]
  },
  "metadata": {
    "isAI": true,
    "tool": "Claude Code",
    "addedBy": "dcramer",
    "addedAt": "2025-07-20T20:31:56.765Z"
  }
}
