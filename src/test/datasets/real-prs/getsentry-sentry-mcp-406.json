{
  "id": "getsentry/sentry-mcp#406",
  "url": "https://github.com/getsentry/sentry-mcp/pull/406",
  "repo": "getsentry/sentry-mcp",
  "prNumber": 406,
  "title": "fix: bundle OpenTelemetry data at build time for Cloudflare Workers compatibility",
  "description": "## Summary\n\nThis PR fixes Cloudflare Workers deployment errors and improves the codebase by bundling OpenTelemetry data at build time and adding proper TypeScript types for tool definitions.\n\n### Changes\n\n**Bug Fixes:**\n- Bundle OpenTelemetry namespace data at build time to avoid Node.js file system APIs in Cloudflare Workers\n- Fix namespace key generation to replace all hyphens (not just the first) for consistent lookups\n- Remove unnecessary type annotations where TypeScript can infer types\n\n**Features:**\n- Add native TypeScript types for tool definitions, eliminating type casting in the UI\n- Simplify toolDefinitions.json to only include fields needed by the UI (36% size reduction)\n\n**Refactoring:**\n- Clean up misleading comments that don't match the atomic nature of changes\n- Remove unused experimental tool definition generator scripts with poor naming\n- Improve code organization with cleaner type definitions\n\n### Technical Details\n\nThe main issue was that `otel-semantics-lookup` was using Node.js file system APIs (`readFileSync`, `readdirSync`) which don't work in Cloudflare Workers. We fixed this by:\n\n1. Creating a build script that bundles all 73 OpenTelemetry namespace JSON files into a single TypeScript module\n2. Refactoring the lookup module to import pre-generated data instead of reading files at runtime\n3. Using npm lifecycle hooks (`prebuild`/`postbuild`) for better build process organization\n\nAdditionally, we improved type safety by generating a typed `toolDefinitions.ts` module alongside the JSON file, and simplified the JSON structure to only include what the UI actually uses (name, description, and parameter descriptions).\n\n---\n*This PR was created with Claude Code*",
  "author": "dcramer",
  "createdAt": "2025-07-18T22:56:19Z",
  "files": [
    {
      "filename": ".gitignore",
      "patch": "@@ -60,3 +60,6 @@ coverage\n \n # Sentry Config File\n .env.sentry-build-plugin\n+\n+# Generated files\n+packages/mcp-server/src/toolDefinitions.json"
    },
    {
      "filename": "package.json",
      "patch": "@@ -69,5 +69,8 @@\n       \"simple-git-hooks\",\n       \"workerd\"\n     ]\n+  },\n+  \"devDependencies\": {\n+    \"@types/json-schema\": \"^7.0.15\"\n   }\n }"
    },
    {
      "filename": "packages/mcp-cloudflare/package.json",
      "patch": "@@ -4,9 +4,7 @@\n   \"private\": true,\n   \"type\": \"module\",\n   \"license\": \"FSL-1.1-ALv2\",\n-  \"files\": [\n-    \"./dist/*\"\n-  ],\n+  \"files\": [\"./dist/*\"],\n   \"exports\": {\n     \".\": {\n       \"types\": \"./dist/index.ts\","
    },
    {
      "filename": "packages/mcp-server-tsconfig/package.json",
      "patch": "@@ -2,8 +2,5 @@\n   \"name\": \"@sentry/mcp-server-tsconfig\",\n   \"version\": \"0.16.0\",\n   \"private\": true,\n-  \"files\": [\n-    \"tsconfig.base.json\",\n-    \"tsconfig.vite.json\"\n-  ]\n+  \"files\": [\"tsconfig.base.json\", \"tsconfig.vite.json\"]\n }"
    },
    {
      "filename": "packages/mcp-server/package.json",
      "patch": "@@ -63,6 +63,7 @@\n       \"default\": \"./dist/resources.js\"\n     },\n     \"./toolDefinitions\": {\n+      \"types\": \"./dist/toolDefinitions.ts\",\n       \"default\": \"./dist/toolDefinitions.js\"\n     },\n     \"./types\": {\n@@ -75,12 +76,13 @@\n     }\n   },\n   \"scripts\": {\n-    \"build\": \"tsdown && pnpm run generate-tool-definitions\",\n+    \"prebuild\": \"pnpm run generate-tool-definitions\",\n+    \"build\": \"tsdown\",\n     \"dev\": \"pnpm run generate-tool-definitions && tsc -w\",\n     \"start\": \"tsx src/index.ts\",\n     \"prepare\": \"pnpm run build\",\n-    \"test\": \"pnpm run generate-tool-definitions && vitest\",\n-    \"test:ci\": \"pnpm run generate-tool-definitions && vitest run --coverage --reporter=junit --outputFile=tests.junit.xml\",\n+    \"test\": \"vitest\",\n+    \"test:ci\": \"vitest run --coverage --reporter=junit --outputFile=tests.junit.xml\",\n     \"tsc\": \"tsc --noEmit\",\n     \"test:watch\": \"vitest watch\",\n     \"generate-tool-definitions\": \"tsx scripts/generate-tool-definitions.ts\","
    },
    {
      "filename": "packages/mcp-server/scripts/generate-otel-namespaces.ts",
      "patch": "@@ -285,7 +285,7 @@ function convertYamlToJson(\n   }\n \n   return {\n-    namespace: namespace.replace(\"-\", \"_\"), // Convert hyphen to underscore for consistency\n+    namespace: namespace.replace(/-/g, \"_\"), // Convert all hyphens to underscores for consistency\n     description: group.brief,\n     attributes,\n   };\n@@ -322,7 +322,10 @@ async function generateNamespaceFiles() {\n   }> = [];\n \n   for (const namespace of KNOWN_NAMESPACES) {\n-    const outputPath = resolve(DATA_DIR, `${namespace.replace(\"-\", \"_\")}.json`);\n+    const outputPath = resolve(\n+      DATA_DIR,\n+      `${namespace.replace(/-/g, \"_\")}.json`,\n+    );\n \n     // Check if file exists and has custom content (not from OpenTelemetry)\n     if (existsSync(outputPath)) {"
    },
    {
      "filename": "packages/mcp-server/scripts/generate-tool-definitions.ts",
      "patch": "@@ -20,24 +20,30 @@ const __filename = fileURLToPath(import.meta.url);\n const __dirname = path.dirname(__filename);\n \n // Import tools from the source directory\n-const tools = await import(\"../src/tools/index.js\");\n+const tools = await import(\"../src/tools/index.ts\");\n \n /**\n- * Convert Zod schema object to JSON Schema properties\n+ * Convert Zod schema object to simplified parameter definitions\n+ * Only extracts description since that's all the UI needs\n  */\n-function convertInputSchemaToJsonSchema(inputSchema: Record<string, any>) {\n+function convertInputSchemaToSimplified(inputSchema: Record<string, any>) {\n   if (!inputSchema || Object.keys(inputSchema).length === 0) {\n     return {};\n   }\n \n   const properties: Record<string, any> = {};\n \n-  // Convert each individual Zod schema to JSON Schema\n+  // Extract only the description from each Zod schema\n   for (const [key, zodSchema] of Object.entries(inputSchema)) {\n+    // Get the full JSON Schema to extract description\n     const jsonSchema = zodToJsonSchema(zodSchema, {\n-      $refStrategy: \"none\", // Don't use $ref for cleaner output\n+      $refStrategy: \"none\",\n     });\n-    properties[key] = jsonSchema;\n+\n+    // Only include description field for UI display\n+    properties[key] = {\n+      description: jsonSchema.description || \"\",\n+    };\n   }\n \n   return properties;\n@@ -50,7 +56,7 @@ function generateToolDefinitions() {\n   const toolsDefault = tools.default;\n \n   if (!toolsDefault || typeof toolsDefault !== \"object\") {\n-    throw new Error(\"Failed to import tools from src/tools/index.js\");\n+    throw new Error(\"Failed to import tools from src/tools/index.ts\");\n   }\n \n   return Object.entries(toolsDefault).map(([key, tool]) => {\n@@ -68,8 +74,8 @@ function generateToolDefinitions() {\n       throw new Error(`Tool ${key} is missing name or description`);\n     }\n \n-    // Convert Zod schemas to JSON Schema\n-    const inputSchema = convertInputSchemaToJsonSchema(\n+    // Convert Zod schemas to simplified format for UI\n+    const inputSchema = convertInputSchemaToSimplified(\n       toolObj.inputSchema || {},\n     );\n \n@@ -90,45 +96,9 @@ async function main() {\n \n     const definitions = generateToolDefinitions();\n \n-    // Ensure dist directory exists\n-    const distDir = path.join(__dirname, \"../dist\");\n-    if (!fs.existsSync(distDir)) {\n-      fs.mkdirSync(distDir, { recursive: true });\n-    }\n-\n-    // Write the definitions to JavaScript file\n-    const outputPath = path.join(distDir, \"toolDefinitions.js\");\n-    const jsContent = `export default ${JSON.stringify(definitions, null, 2)};`;\n-    fs.writeFileSync(outputPath, jsContent);\n-\n-    // Write TypeScript declaration file\n-    const dtsPath = path.join(distDir, \"toolDefinitions.d.ts\");\n-    const dtsContent = `// JSON Schema property type definition\n-export interface JsonSchemaProperty {\n-  type: string;\n-  description: string;\n-  enum?: string[];\n-  default?: any;\n-  format?: string;\n-  minLength?: number;\n-  maxLength?: number;\n-  minimum?: number;\n-  maximum?: number;\n-}\n-\n-// Tool definition interface with proper JSON Schema types\n-export interface ToolDefinition {\n-  name: string;\n-  description: string;\n-  inputSchema: Record<string, JsonSchemaProperty>;\n-}\n-\n-// Array of tool definitions with proper typing\n-export type ToolDefinitions = ToolDefinition[];\n-\n-declare const toolDefinitions: ToolDefinitions;\n-export default toolDefinitions;`;\n-    fs.writeFileSync(dtsPath, dtsContent);\n+    // Write the definitions to JSON file in src directory for prebuild bundling\n+    const outputPath = path.join(__dirname, \"../src/toolDefinitions.json\");\n+    fs.writeFileSync(outputPath, JSON.stringify(definitions, null, 2));\n \n     console.log(\n       `✅ Generated tool definitions for ${definitions.length} tools`,"
    },
    {
      "filename": "packages/mcp-server/src/toolDefinitions.json",
      "patch": "@@ -1,952 +0,0 @@\n-[\n-  {\n-    \"name\": \"whoami\",\n-    \"description\": \"Identify the authenticated user in Sentry.\\n\\nUse this tool when you need to:\\n- Get the user's name and email address.\",\n-    \"inputSchema\": {}\n-  },\n-  {\n-    \"name\": \"find_organizations\",\n-    \"description\": \"Find organizations that the user has access to in Sentry.\\n\\nUse this tool when you need to:\\n- View all organizations in Sentry\\n- Find an organization's slug to aid other tool requests\",\n-    \"inputSchema\": {}\n-  },\n-  {\n-    \"name\": \"find_teams\",\n-    \"description\": \"Find teams in an organization in Sentry.\\n\\nUse this tool when you need to:\\n- View all teams in a Sentry organization\\n- Find a team's slug to aid other tool requests\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"find_projects\",\n-    \"description\": \"Find projects in Sentry.\\n\\nUse this tool when you need to:\\n- View all projects in a Sentry organization\\n- Find a project's slug to aid other tool requests\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"find_issues\",\n-    \"description\": \"Find grouped issues/problems in Sentry - NOT individual events.\\n\\n🔍 USE THIS TOOL WHEN USERS ASK FOR:\\n- 'show me issues', 'list problems', 'what issues do we have'\\n- 'unresolved issues', 'recent problems affecting users'\\n- 'issue summaries', 'grouped errors', 'error types'\\n- General questions about problems without specific event details\\n\\n❌ DO NOT USE when users want:\\n- Specific error events/logs from a time period (use search_events)\\n- Individual occurrences with timestamps (use search_events)\\n- Details about a specific issue ID like 'PROJECT-123' (use get_issue_details)\\n\\nCRITICAL: Issues are grouped/deduplicated problems, not individual events.\\n\\n<examples>\\n### Find unresolved issues\\n```\\nfind_issues(organizationSlug='my-organization', query='is:unresolved', sortBy='last_seen')\\n```\\n\\n### Find crashes in project\\n```\\nfind_issues(organizationSlug='my-organization', projectSlug='my-project', query='is:unresolved error.handled:false', sortBy='count')\\n```\\n</examples>\\n\\n<hints>\\n- If the user passes a parameter in the form of name/otherName, its likely in the format of <organizationSlug>/<projectSlug>.\\n- You can use the `find_tags()` tool to see what user-defined tags are available.\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"projectSlug\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The project's slug. You can find a list of existing projects in an organization using the `find_projects()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The project's slug. You can find a list of existing projects in an organization using the `find_projects()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"query\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The search query to apply. Use the `help(subject=\\\"query_syntax\\\")` tool to get more information about the query syntax rather than guessing.\"\n-          }\n-        ],\n-        \"description\": \"The search query to apply. Use the `help(subject=\\\"query_syntax\\\")` tool to get more information about the query syntax rather than guessing.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"sortBy\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"enum\": [\"last_seen\", \"first_seen\", \"count\", \"userCount\"],\n-            \"description\": \"Sort the results either by the last time they occurred, the first time they occurred, the count of occurrences, or the number of users affected.\"\n-          }\n-        ],\n-        \"description\": \"Sort the results either by the last time they occurred, the first time they occurred, the count of occurrences, or the number of users affected.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"find_releases\",\n-    \"description\": \"Find releases in Sentry.\\n\\nUse this tool when you need to:\\n- Find recent releases in a Sentry organization\\n- Find the most recent version released of a specific project\\n- Determine when a release was deployed to an environment\\n\\n<examples>\\n### Find the most recent releases in the 'my-organization' organization\\n\\n```\\nfind_releases(organizationSlug='my-organization')\\n```\\n\\n### Find releases matching '2ce6a27' in the 'my-organization' organization\\n\\n```\\nfind_releases(organizationSlug='my-organization', query='2ce6a27')\\n```\\n</examples>\\n\\n<hints>\\n- If the user passes a parameter in the form of name/otherName, its likely in the format of <organizationSlug>/<projectSlug>.\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"projectSlug\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The project's slug. This will default to all projects you have access to. It is encouraged to specify this when possible.\"\n-          }\n-        ],\n-        \"description\": \"The project's slug. This will default to all projects you have access to. It is encouraged to specify this when possible.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"query\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"Search for versions which contain the provided string.\"\n-          }\n-        ],\n-        \"description\": \"Search for versions which contain the provided string.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"find_tags\",\n-    \"description\": \"Find tags in Sentry.\\n\\nUse this tool when you need to:\\n- Find tags available to use in search queries (such as `find_issues()` or `find_errors()`)\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"get_issue_details\",\n-    \"description\": \"Get detailed information about a specific Sentry issue by ID.\\n\\n🔍 USE THIS TOOL WHEN USERS:\\n- Provide a specific issue ID (e.g., 'CLOUDFLARE-MCP-41', 'PROJECT-123')\\n- Ask to 'explain [ISSUE-ID]', 'tell me about [ISSUE-ID]'\\n- Want details/stacktrace/analysis for a known issue\\n- Provide a Sentry issue URL\\n\\n❌ DO NOT USE for:\\n- General searching or listing issues (use find_issues)\\n- Root cause analysis (use analyze_issue_with_seer)\\n\\nTRIGGER PATTERNS:\\n- 'Explain ISSUE-123' → use get_issue_details\\n- 'Tell me about PROJECT-456' → use get_issue_details\\n- 'What happened in [issue URL]' → use get_issue_details\\n\\n<examples>\\n### Explain specific issue\\n```\\nget_issue_details(organizationSlug='my-organization', issueId='CLOUDFLARE-MCP-41')\\n```\\n\\n### Get details for event ID\\n```\\nget_issue_details(organizationSlug='my-organization', eventId='c49541c747cb4d8aa3efb70ca5aba243')\\n```\\n</examples>\\n\\n<hints>\\n- If the user provides the `issueUrl`, you can ignore the other parameters.\\n- If the user provides `issueId` or `eventId` (only one is needed), `organizationSlug` is required.\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"issueId\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The Issue ID. e.g. `PROJECT-1Z43`\"\n-          }\n-        ],\n-        \"description\": \"The Issue ID. e.g. `PROJECT-1Z43`\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"eventId\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The ID of the event.\"\n-          }\n-        ],\n-        \"description\": \"The ID of the event.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"issueUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"format\": \"uri\",\n-            \"description\": \"The URL of the issue. e.g. https://my-organization.sentry.io/issues/PROJECT-1Z43\"\n-          }\n-        ],\n-        \"description\": \"The URL of the issue. e.g. https://my-organization.sentry.io/issues/PROJECT-1Z43\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"get_event_attachment\",\n-    \"description\": \"Download attachments from a Sentry event.\\n\\nUse this tool when you need to:\\n- Download files attached to a specific event\\n- Access screenshots, log files, or other attachments uploaded with an error report\\n- Retrieve attachment metadata and download URLs\\n\\n<examples>\\n### Download a specific attachment by ID\\n\\n```\\nget_event_attachment(organizationSlug='my-organization', projectSlug='my-project', eventId='c49541c747cb4d8aa3efb70ca5aba243', attachmentId='12345')\\n```\\n\\n### List all attachments for an event\\n\\n```\\nget_event_attachment(organizationSlug='my-organization', projectSlug='my-project', eventId='c49541c747cb4d8aa3efb70ca5aba243')\\n```\\n\\n</examples>\\n\\n<hints>\\n- If `attachmentId` is provided, the specific attachment will be downloaded as an embedded resource\\n- If `attachmentId` is omitted, all attachments for the event will be listed with download information\\n- The `projectSlug` is required to identify which project the event belongs to\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"projectSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The project's slug. You can find a list of existing projects in an organization using the `find_projects()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"eventId\": {\n-        \"type\": \"string\",\n-        \"description\": \"The ID of the event.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"attachmentId\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The ID of the attachment to download.\"\n-          }\n-        ],\n-        \"description\": \"The ID of the attachment to download.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"update_issue\",\n-    \"description\": \"Update an issue's status or assignment in Sentry. This allows you to resolve, ignore, or reassign issues.\\n\\nUse this tool when you need to:\\n- Resolve an issue that has been fixed\\n- Assign an issue to a team member or team for investigation\\n- Mark an issue as ignored to reduce noise\\n- Reopen a resolved issue by setting status to 'unresolved'\\n\\n<examples>\\n### Resolve an issue\\n\\n```\\nupdate_issue(organizationSlug='my-organization', issueId='PROJECT-123', status='resolved')\\n```\\n\\n### Assign an issue to a user\\n\\n```\\nupdate_issue(organizationSlug='my-organization', issueId='PROJECT-123', assignedTo='john.doe')\\n```\\n\\n### Resolve an issue and assign it to yourself\\n\\n```\\nupdate_issue(organizationSlug='my-organization', issueId='PROJECT-123', status='resolved', assignedTo='me')\\n```\\n\\n### Mark an issue as ignored\\n\\n```\\nupdate_issue(organizationSlug='my-organization', issueId='PROJECT-123', status='ignored')\\n```\\n\\n</examples>\\n\\n<hints>\\n- If the user provides the `issueUrl`, you can ignore the other required parameters and extract them from the URL.\\n- At least one of `status` or `assignedTo` must be provided to update the issue.\\n- Use 'me' as the value for `assignedTo` to assign the issue to the authenticated user.\\n- Valid status values are: 'resolved', 'resolvedInNextRelease', 'unresolved', 'ignored'.\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"issueId\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The Issue ID. e.g. `PROJECT-1Z43`\"\n-          }\n-        ],\n-        \"description\": \"The Issue ID. e.g. `PROJECT-1Z43`\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"issueUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"format\": \"uri\",\n-            \"description\": \"The URL of the issue. e.g. https://my-organization.sentry.io/issues/PROJECT-1Z43\"\n-          }\n-        ],\n-        \"description\": \"The URL of the issue. e.g. https://my-organization.sentry.io/issues/PROJECT-1Z43\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"status\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"enum\": [\n-              \"resolved\",\n-              \"resolvedInNextRelease\",\n-              \"unresolved\",\n-              \"ignored\"\n-            ],\n-            \"description\": \"The new status for the issue. Valid values are 'resolved', 'resolvedInNextRelease', 'unresolved', and 'ignored'.\"\n-          }\n-        ],\n-        \"description\": \"The new status for the issue. Valid values are 'resolved', 'resolvedInNextRelease', 'unresolved', and 'ignored'.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"assignedTo\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The username or team slug to assign the issue to. Use 'me' to assign to yourself, or provide a username/team slug.\"\n-          }\n-        ],\n-        \"description\": \"The username or team slug to assign the issue to. Use 'me' to assign to yourself, or provide a username/team slug.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"search_events\",\n-    \"description\": \"Search for error events, log entries, or trace spans. Supports both individual event queries and SQL-like aggregations.\\n\\nAutomatically uses natural language to search across Sentry data, returning either:\\n- Individual events with full details (default)\\n- Aggregated results when using functions like count(), avg(), sum(), etc.\\n\\nDataset Selection (AI agent determines the appropriate dataset):\\n- errors: Exception/crash events\\n- logs: Log entries (use for 'error logs')\\n- spans: Performance/trace data, AI/LLM calls, token usage\\n\\nIntelligence: AI agent analyzes the query to choose the correct dataset and fields\\n\\n❌ DO NOT USE for 'issues' or 'problems' (use find_issues instead)\\n\\n📚 For detailed API patterns and examples, see: docs/search-events-api-patterns.md\\n\\n<examples>\\nsearch_events(organizationSlug='my-org', naturalLanguageQuery='database errors in the last hour')\\nsearch_events(organizationSlug='my-org', naturalLanguageQuery='how many tokens used today')\\nsearch_events(organizationSlug='my-org', naturalLanguageQuery='slowest API calls')\\n</examples>\\n\\n<hints>\\n- If the user passes a parameter in the form of name/otherName, it's likely in the format of <organizationSlug>/<projectSlug>.\\n- Parse org/project notation directly without calling find_organizations or find_projects.\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"naturalLanguageQuery\": {\n-        \"type\": \"string\",\n-        \"minLength\": 1,\n-        \"description\": \"Natural language description of what you want to search for\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"projectSlug\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The project's slug. You can find a list of existing projects in an organization using the `find_projects()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The project's slug. You can find a list of existing projects in an organization using the `find_projects()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"limit\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"number\",\n-            \"minimum\": 1,\n-            \"maximum\": 100\n-          }\n-        ],\n-        \"default\": 10,\n-        \"description\": \"Maximum number of results to return\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"includeExplanation\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"boolean\"\n-          }\n-        ],\n-        \"default\": false,\n-        \"description\": \"Include explanation of how the query was translated\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"create_team\",\n-    \"description\": \"Create a new team in Sentry.\\n\\n🔍 USE THIS TOOL WHEN USERS WANT TO:\\n- 'Create a new team'\\n- 'Set up a team called [X]'\\n- 'I need a team for my project'\\n\\nBe careful when using this tool!\\n\\n<examples>\\n### Create a new team\\n```\\ncreate_team(organizationSlug='my-organization', name='the-goats')\\n```\\n</examples>\\n\\n<hints>\\n- If any parameter is ambiguous, you should clarify with the user what they meant.\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"name\": {\n-        \"type\": \"string\",\n-        \"description\": \"The name of the team to create.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"create_project\",\n-    \"description\": \"Create a new project in Sentry (includes DSN automatically).\\n\\n🔍 USE THIS TOOL WHEN USERS WANT TO:\\n- 'Create a new project'\\n- 'Set up a project for [app/service] with team [X]'\\n- 'I need a new Sentry project'\\n- Create project AND need DSN in one step\\n\\n❌ DO NOT USE create_dsn after this - DSN is included in output.\\n\\nBe careful when using this tool!\\n\\n<examples>\\n### Create new project with team\\n```\\ncreate_project(organizationSlug='my-organization', teamSlug='my-team', name='my-project', platform='javascript')\\n```\\n</examples>\\n\\n<hints>\\n- If the user passes a parameter in the form of name/otherName, its likely in the format of <organizationSlug>/<teamSlug>.\\n- If any parameter is ambiguous, you should clarify with the user what they meant.\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"teamSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The team's slug. You can find a list of existing teams in an organization using the `find_teams()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"name\": {\n-        \"type\": \"string\",\n-        \"description\": \"The name of the project to create. Typically this is commonly the name of the repository or service. It is only used as a visual label in Sentry.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"platform\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The platform for the project. e.g., python, javascript, react, etc.\"\n-          }\n-        ],\n-        \"description\": \"The platform for the project. e.g., python, javascript, react, etc.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"update_project\",\n-    \"description\": \"Update project settings in Sentry, such as name, slug, platform, and team assignment.\\n\\nBe careful when using this tool!\\n\\nUse this tool when you need to:\\n- Update a project's name or slug to fix onboarding mistakes\\n- Change the platform assigned to a project\\n- Update team assignment for a project\\n\\n<examples>\\n### Update a project's name and slug\\n\\n```\\nupdate_project(organizationSlug='my-organization', projectSlug='old-project', name='New Project Name', slug='new-project-slug')\\n```\\n\\n### Assign a project to a different team\\n\\n```\\nupdate_project(organizationSlug='my-organization', projectSlug='my-project', teamSlug='backend-team')\\n```\\n\\n### Update platform\\n\\n```\\nupdate_project(organizationSlug='my-organization', projectSlug='my-project', platform='python')\\n```\\n\\n</examples>\\n\\n<hints>\\n- If the user passes a parameter in the form of name/otherName, it's likely in the format of <organizationSlug>/<projectSlug>.\\n- Team assignment is handled separately from other project settings\\n- If any parameter is ambiguous, you should clarify with the user what they meant.\\n- When updating the slug, the project will be accessible at the new slug after the update\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"projectSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The project's slug. You can find a list of existing projects in an organization using the `find_projects()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"name\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The new name for the project\"\n-          }\n-        ],\n-        \"description\": \"The new name for the project\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"slug\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The new slug for the project (must be unique)\"\n-          }\n-        ],\n-        \"description\": \"The new slug for the project (must be unique)\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"platform\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The platform for the project. e.g., python, javascript, react, etc.\"\n-          }\n-        ],\n-        \"description\": \"The platform for the project. e.g., python, javascript, react, etc.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"teamSlug\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The team's slug. You can find a list of existing teams in an organization using the `find_teams()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The team to assign this project to. Note: this will replace the current team assignment.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"create_dsn\",\n-    \"description\": \"Create an additional DSN for an EXISTING project.\\n\\n🔍 USE THIS TOOL WHEN:\\n- Project already exists and needs additional DSN\\n- 'Create another DSN for project X'\\n- 'I need a production DSN for existing project'\\n\\n❌ DO NOT USE for new projects (use create_project instead)\\n\\nBe careful when using this tool!\\n\\n<examples>\\n### Create additional DSN for existing project\\n```\\ncreate_dsn(organizationSlug='my-organization', projectSlug='my-project', name='Production')\\n```\\n</examples>\\n\\n<hints>\\n- If the user passes a parameter in the form of name/otherName, its likely in the format of <organizationSlug>/<projectSlug>.\\n- If any parameter is ambiguous, you should clarify with the user what they meant.\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"projectSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The project's slug. You can find a list of existing projects in an organization using the `find_projects()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"name\": {\n-        \"type\": \"string\",\n-        \"description\": \"The name of the DSN to create, for example 'Production'.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"find_dsns\",\n-    \"description\": \"List all Sentry DSNs for a specific project.\\n\\nUse this tool when you need to:\\n- Retrieve a SENTRY_DSN for a specific project\\n\\n<hints>\\n- If the user passes a parameter in the form of name/otherName, its likely in the format of <organizationSlug>/<projectSlug>.\\n- If only one parameter is provided, and it could be either `organizationSlug` or `projectSlug`, its probably `organizationSlug`, but if you're really uncertain you might want to call `find_organizations()` first.\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"projectSlug\": {\n-        \"type\": \"string\",\n-        \"description\": \"The project's slug. You can find a list of existing projects in an organization using the `find_projects()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"analyze_issue_with_seer\",\n-    \"description\": \"Use Seer AI to analyze production errors and get detailed root cause analysis with specific code fixes.\\n\\nUse this tool when you need:\\n- Detailed AI-powered root cause analysis\\n- Specific code fixes and implementation guidance\\n- Step-by-step troubleshooting for complex issues\\n- Understanding why an error is happening in production\\n\\nWhat this tool provides:\\n- Root cause analysis with code-level explanations\\n- Specific file locations and line numbers where errors occur\\n- Concrete code fixes you can apply\\n- Step-by-step implementation guidance\\n\\nThis tool automatically:\\n1. Checks if analysis already exists (instant results)\\n2. Starts new AI analysis if needed (~2-5 minutes)\\n3. Returns complete fix recommendations\\n\\n<examples>\\n### User: \\\"What's causing this error? https://my-org.sentry.io/issues/PROJECT-1Z43\\\"\\n\\n```\\nanalyze_issue_with_seer(issueUrl='https://my-org.sentry.io/issues/PROJECT-1Z43')\\n```\\n\\n### User: \\\"Can you help me understand why this is failing in production?\\\"\\n\\n```\\nanalyze_issue_with_seer(organizationSlug='my-organization', issueId='ERROR-456')\\n```\\n</examples>\\n\\n<hints>\\n- Use this tool when you need deeper analysis beyond basic issue details\\n- If the user provides an issueUrl, extract it and use that parameter alone\\n- The analysis includes actual code snippets and fixes, not just error descriptions\\n- Results are cached - subsequent calls return instantly\\n</hints>\",\n-    \"inputSchema\": {\n-      \"organizationSlug\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The organization's slug. You can find a existing list of organizations you have access to using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"regionUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\"\n-          }\n-        ],\n-        \"description\": \"The region URL for the organization you're querying, if known. For Sentry's Cloud Service (sentry.io), this is typically the region-specific URL like 'https://us.sentry.io'. For self-hosted Sentry installations, this parameter is usually not needed and should be omitted. You can find the correct regionUrl from the organization details using the `find_organizations()` tool.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"issueId\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"The Issue ID. e.g. `PROJECT-1Z43`\"\n-          }\n-        ],\n-        \"description\": \"The Issue ID. e.g. `PROJECT-1Z43`\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"issueUrl\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"format\": \"uri\",\n-            \"description\": \"The URL of the issue. e.g. https://my-organization.sentry.io/issues/PROJECT-1Z43\"\n-          }\n-        ],\n-        \"description\": \"The URL of the issue. e.g. https://my-organization.sentry.io/issues/PROJECT-1Z43\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"instruction\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"description\": \"Optional custom instruction for the AI analysis\"\n-          }\n-        ],\n-        \"description\": \"Optional custom instruction for the AI analysis\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"search_docs\",\n-    \"description\": \"Search Sentry documentation for SDK setup, instrumentation, and configuration guidance.\\n\\nUse this tool when you need to:\\n- Set up Sentry SDK in any language (Python, JavaScript, Go, Ruby, etc.)\\n- Configure specific features like performance monitoring, error sampling, or release tracking\\n- Implement custom instrumentation (spans, transactions, breadcrumbs)\\n- Set up integrations with frameworks (Django, Flask, Express, Next.js, etc.)\\n- Configure data scrubbing, filtering, or sampling rules\\n- Troubleshoot SDK issues or find best practices\\n\\nThis tool searches technical documentation, NOT general information about Sentry as a company.\\n\\n<examples>\\n### Setting up Sentry in a Python Django app\\n\\n```\\nsearch_docs(query='Django setup configuration SENTRY_DSN', guide='python/django')\\n```\\n\\n### Setting up source maps for Next.js\\n\\n```\\nsearch_docs(query='source maps webpack upload', guide='javascript/nextjs')\\n```\\n\\n### Configuring release tracking\\n\\n```\\nsearch_docs(query='release tracking deployment integration CI/CD')\\n```\\n</examples>\\n\\n<hints>\\n- Use guide parameter to filter results to specific technologies (e.g., 'javascript' or 'javascript/nextjs')\\n- Include the programming language/framework in your query for SDK-specific results\\n- Use technical terms like 'instrumentation', 'spans', 'transactions' for performance docs\\n- Include specific feature names like 'beforeSend', 'tracesSampleRate', 'SENTRY_DSN'\\n</hints>\",\n-    \"inputSchema\": {\n-      \"query\": {\n-        \"type\": \"string\",\n-        \"minLength\": 2,\n-        \"maxLength\": 200,\n-        \"description\": \"The search query in natural language. Be specific about what you're looking for.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"maxResults\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"integer\",\n-            \"minimum\": 1,\n-            \"maximum\": 10,\n-            \"default\": 3,\n-            \"description\": \"Maximum number of results to return (1-10)\"\n-          }\n-        ],\n-        \"description\": \"Maximum number of results to return (1-10)\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      },\n-      \"guide\": {\n-        \"anyOf\": [\n-          {\n-            \"not\": {}\n-          },\n-          {\n-            \"type\": \"string\",\n-            \"enum\": [\n-              \"javascript\",\n-              \"python\",\n-              \"java\",\n-              \"dotnet\",\n-              \"go\",\n-              \"php\",\n-              \"ruby\",\n-              \"android\",\n-              \"apple\",\n-              \"unity\",\n-              \"unreal\",\n-              \"rust\",\n-              \"elixir\",\n-              \"kotlin\",\n-              \"native\",\n-              \"dart\",\n-              \"godot\",\n-              \"nintendo-switch\",\n-              \"playstation\",\n-              \"powershell\",\n-              \"react-native\",\n-              \"xbox\",\n-              \"javascript/nextjs\",\n-              \"javascript/react\",\n-              \"javascript/gatsby\",\n-              \"javascript/remix\",\n-              \"javascript/vue\",\n-              \"javascript/angular\",\n-              \"javascript/hono\",\n-              \"javascript/svelte\",\n-              \"javascript/express\",\n-              \"javascript/fastify\",\n-              \"javascript/astro\",\n-              \"javascript/bun\",\n-              \"javascript/capacitor\",\n-              \"javascript/cloudflare\",\n-              \"javascript/connect\",\n-              \"javascript/cordova\",\n-              \"javascript/deno\",\n-              \"javascript/electron\",\n-              \"javascript/ember\",\n-              \"javascript/nuxt\",\n-              \"javascript/solid\",\n-              \"javascript/solidstart\",\n-              \"javascript/sveltekit\",\n-              \"javascript/tanstack-react\",\n-              \"javascript/wasm\",\n-              \"javascript/node\",\n-              \"javascript/koa\",\n-              \"javascript/nestjs\",\n-              \"javascript/hapi\",\n-              \"python/django\",\n-              \"python/flask\",\n-              \"python/fastapi\",\n-              \"python/celery\",\n-              \"python/tornado\",\n-              \"python/pyramid\",\n-              \"python/aiohttp\",\n-              \"python/anthropic\",\n-              \"python/airflow\",\n-              \"python/aws-lambda\",\n-              \"python/boto3\",\n-              \"python/bottle\",\n-              \"python/chalice\",\n-              \"python/dramatiq\",\n-              \"python/falcon\",\n-              \"python/langchain\",\n-              \"python/litestar\",\n-              \"python/logging\",\n-              \"python/loguru\",\n-              \"python/openai\",\n-              \"python/quart\",\n-              \"python/ray\",\n-              \"python/redis\",\n-              \"python/rq\",\n-              \"python/sanic\",\n-              \"python/sqlalchemy\",\n-              \"python/starlette\",\n-              \"dart/flutter\",\n-              \"dotnet/aspnetcore\",\n-              \"dotnet/maui\",\n-              \"dotnet/wpf\",\n-              \"dotnet/winforms\",\n-              \"dotnet/aspnet\",\n-              \"dotnet/aws-lambda\",\n-              \"dotnet/azure-functions\",\n-              \"dotnet/blazor-webassembly\",\n-              \"dotnet/entityframework\",\n-              \"dotnet/google-cloud-functions\",\n-              \"dotnet/extensions-logging\",\n-              \"dotnet/log4net\",\n-              \"dotnet/nlog\",\n-              \"dotnet/serilog\",\n-              \"dotnet/uwp\",\n-              \"dotnet/xamarin\",\n-              \"java/spring\",\n-              \"java/spring-boot\",\n-              \"java/android\",\n-              \"java/jul\",\n-              \"java/log4j2\",\n-              \"java/logback\",\n-              \"java/servlet\",\n-              \"go/echo\",\n-              \"go/fasthttp\",\n-              \"go/fiber\",\n-              \"go/gin\",\n-              \"go/http\",\n-              \"go/iris\",\n-              \"go/logrus\",\n-              \"go/negroni\",\n-              \"go/slog\",\n-              \"go/zerolog\",\n-              \"php/laravel\",\n-              \"php/symfony\",\n-              \"ruby/delayed_job\",\n-              \"ruby/rack\",\n-              \"ruby/rails\",\n-              \"ruby/resque\",\n-              \"ruby/sidekiq\",\n-              \"android/kotlin\",\n-              \"apple/ios\",\n-              \"apple/macos\",\n-              \"apple/watchos\",\n-              \"apple/tvos\",\n-              \"apple/visionos\",\n-              \"kotlin/multiplatform\"\n-            ],\n-            \"description\": \"Optional guide filter to limit search results to specific documentation sections. Use either a platform (e.g., 'javascript', 'python') or platform/guide combination (e.g., 'javascript/nextjs', 'python/django').\"\n-          }\n-        ],\n-        \"description\": \"Optional guide filter to limit search results to specific documentation sections. Use either a platform (e.g., 'javascript', 'python') or platform/guide combination (e.g., 'javascript/nextjs', 'python/django').\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  },\n-  {\n-    \"name\": \"get_doc\",\n-    \"description\": \"Fetch the full markdown content of a Sentry documentation page.\\n\\nUse this tool when you need to:\\n- Read the complete documentation for a specific topic\\n- Get detailed implementation examples or code snippets\\n- Access the full context of a documentation page\\n- Extract specific sections from documentation\\n\\n<examples>\\n### Get the Next.js integration guide\\n\\n```\\nget_doc(path='/platforms/javascript/guides/nextjs.md')\\n```\\n</examples>\\n\\n<hints>\\n- Use the path from search_docs results for accurate fetching\\n- Paths should end with .md extension\\n</hints>\",\n-    \"inputSchema\": {\n-      \"path\": {\n-        \"type\": \"string\",\n-        \"description\": \"The documentation path (e.g., '/platforms/javascript/guides/nextjs.md'). Get this from search_docs results.\",\n-        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\n-      }\n-    }\n-  }\n-]"
    },
    {
      "filename": "packages/mcp-server/src/toolDefinitions.ts",
      "patch": "@@ -0,0 +1,18 @@\n+import toolDefinitionsData from \"./toolDefinitions.json\";\n+\n+// Simplified tool parameter with just description for UI display\n+export interface ToolParameter {\n+  description: string;\n+}\n+\n+// Tool definition for UI consumption\n+export interface ToolDefinition {\n+  name: string;\n+  description: string;\n+  inputSchema: Record<string, ToolParameter>;\n+}\n+\n+// Type assertion - we trust the build process generates valid data\n+const toolDefinitions = toolDefinitionsData as ToolDefinition[];\n+\n+export default toolDefinitions;"
    },
    {
      "filename": "packages/mcp-server/src/tools/search-events/tools/data/CLAUDE.md",
      "patch": "@@ -36,6 +36,10 @@ The generation script (`scripts/generate-otel-namespaces.ts`) fetches YAML files\n \n **Caching**: The script caches downloaded YAML files in `.cache/` directory to avoid repeated network requests. Clear the cache to force fresh downloads.\n \n+### JSON Import Handling\n+\n+The JSON files are imported directly in the TypeScript code and bundled by tsdown/rolldown at build time. This approach works seamlessly with Cloudflare Workers since all data is embedded in the JavaScript bundle.\n+\n ### Custom Namespaces\n \n Some namespaces are maintained manually for attributes not yet in the OpenTelemetry specification:"
    },
    {
      "filename": "packages/mcp-server/src/tools/search-events/tools/otel-semantics-lookup.test.ts",
      "patch": "@@ -1,37 +1,12 @@\n-import {\n-  describe,\n-  it,\n-  expect,\n-  vi,\n-  beforeEach,\n-  afterEach,\n-  type Mock,\n-} from \"vitest\";\n+import { describe, it, expect, vi, beforeEach } from \"vitest\";\n import type { SentryApiService } from \"../../../api-client\";\n-import { readFileSync, readdirSync } from \"node:fs\";\n-import { resolve, dirname } from \"node:path\";\n-import { fileURLToPath } from \"node:url\";\n-\n-// Mock the file system module\n-vi.mock(\"fs\", () => ({\n-  readFileSync: vi.fn(),\n-  readdirSync: vi.fn(),\n-}));\n \n vi.mock(\"../../../logging\", () => ({\n   logError: vi.fn(),\n }));\n \n-// Import after mocks are set up\n-import {\n-  lookupOtelSemantics,\n-  loadNamespacesIndex,\n-  getNamespaceInfo,\n-  getAvailableNamespaces,\n-} from \"./otel-semantics-lookup\";\n-\n-const mockReadFileSync = readFileSync as Mock;\n-const mockReaddirSync = readdirSync as Mock;\n+// Import the actual function - no mocking needed since build runs first\n+import { lookupOtelSemantics } from \"./otel-semantics-lookup\";\n \n describe(\"otel-semantics-lookup\", () => {\n   beforeEach(() => {\n@@ -40,116 +15,93 @@ describe(\"otel-semantics-lookup\", () => {\n \n   const mockApiService = {} as SentryApiService;\n \n-  // Helper to set up namespace data\n-  function setupNamespaceData(namespaces: Record<string, any>) {\n-    const files = Object.keys(namespaces).map((ns) => `${ns}.json`);\n-    files.push(\"__namespaces.json\");\n-\n-    mockReaddirSync.mockReturnValue(files);\n-\n-    mockReadFileSync.mockImplementation((path: string) => {\n-      const pathStr = path.toString();\n-\n-      // Handle namespace index\n-      if (pathStr.includes(\"__namespaces.json\")) {\n-        return JSON.stringify({\n-          generated: \"2025-01-01T00:00:00Z\",\n-          totalNamespaces: Object.keys(namespaces).length,\n-          namespaces: Object.entries(namespaces).map(([ns, data]) => ({\n-            namespace: ns,\n-            description: data.description || \"Test namespace\",\n-          })),\n-        });\n-      }\n-\n-      // Handle individual namespace files\n-      for (const [ns, data] of Object.entries(namespaces)) {\n-        if (pathStr.includes(`${ns}.json`)) {\n-          return JSON.stringify(data);\n-        }\n-      }\n-\n-      return \"{}\";\n-    });\n-  }\n-\n-  describe(\"loadNamespacesIndex\", () => {\n-    it(\"should load and parse namespaces index file\", () => {\n-      setupNamespaceData({\n-        gen_ai: {\n-          namespace: \"gen_ai\",\n-          description: \"GenAI operations\",\n-          attributes: {},\n-        },\n-        db: {\n-          namespace: \"db\",\n-          description: \"Database operations\",\n-          attributes: {},\n-        },\n-      });\n-\n-      const result = loadNamespacesIndex();\n-\n-      expect(result.totalNamespaces).toBe(2);\n-      expect(result.namespaces).toHaveLength(2);\n-      expect(result.namespaces[0].namespace).toBe(\"gen_ai\");\n-      expect(result.namespaces[1].namespace).toBe(\"db\");\n+  describe(\"lookupOtelSemantics\", () => {\n+    it(\"should return namespace information for valid namespace\", async () => {\n+      const result = await lookupOtelSemantics(\n+        \"gen_ai\",\n+        undefined,\n+        \"spans\",\n+        mockApiService,\n+        \"test-org\",\n+      );\n+\n+      expect(result).toContain(\"# OpenTelemetry Semantic Conventions: gen_ai\");\n+      expect(result).toContain(\"## Attributes\");\n+      expect(result).toContain(\"`gen_ai.usage.input_tokens`\");\n+      expect(result).toContain(\"`gen_ai.usage.output_tokens`\");\n+      expect(result).toContain(\"- **Type:**\");\n+      expect(result).toContain(\"- **Description:**\");\n     });\n \n-    it(\"should return empty index on error\", () => {\n-      mockReadFileSync.mockImplementation(() => {\n-        throw new Error(\"File not found\");\n-      });\n-      mockReaddirSync.mockReturnValue([]);\n+    it(\"should handle namespace with underscore and dash interchangeably\", async () => {\n+      const result1 = await lookupOtelSemantics(\n+        \"gen_ai\",\n+        undefined,\n+        \"spans\",\n+        mockApiService,\n+        \"test-org\",\n+      );\n+      const result2 = await lookupOtelSemantics(\n+        \"gen-ai\",\n+        undefined,\n+        \"spans\",\n+        mockApiService,\n+        \"test-org\",\n+      );\n+\n+      expect(result1).toBe(result2);\n+    });\n \n-      const result = loadNamespacesIndex();\n+    it(\"should filter attributes by search term\", async () => {\n+      const result = await lookupOtelSemantics(\n+        \"http\",\n+        \"method\",\n+        \"spans\",\n+        mockApiService,\n+        \"test-org\",\n+      );\n \n-      expect(result.totalNamespaces).toBe(0);\n-      expect(result.namespaces).toEqual([]);\n+      expect(result).toContain(\"matching)\");\n+      expect(result).toContain(\"`http.request.method`\");\n     });\n-  });\n \n-  describe(\"lookupOtelSemantics\", () => {\n-    it(\"should return namespace information for valid namespace\", async () => {\n-      // Note: Since the module loads data at import time, we need to test\n-      // with whatever namespaces are actually available in the data directory\n-      // For unit tests, we'll just verify the function structure works\n+    it(\"should show custom namespace note for mcp\", async () => {\n       const result = await lookupOtelSemantics(\n-        \"gen_ai\",\n+        \"mcp\",\n         undefined,\n         \"spans\",\n         mockApiService,\n         \"test-org\",\n       );\n \n-      // The result should either contain namespace info or a not found message\n-      expect(result).toBeTruthy();\n-      expect(typeof result).toBe(\"string\");\n+      expect(result).toContain(\"**Note:** This is a custom namespace\");\n     });\n \n     it(\"should handle invalid namespace\", async () => {\n       const result = await lookupOtelSemantics(\n-        \"definitely_invalid_namespace_that_does_not_exist\",\n+        \"totally_invalid_namespace_that_does_not_exist\",\n         undefined,\n         \"spans\",\n         mockApiService,\n         \"test-org\",\n       );\n \n-      expect(result).toContain(\"not found\");\n+      expect(result).toContain(\n+        \"Namespace 'totally_invalid_namespace_that_does_not_exist' not found\",\n+      );\n     });\n-  });\n \n-  describe(\"helper functions\", () => {\n-    it(\"should get namespace info\", () => {\n-      const info = getNamespaceInfo(\"gen_ai\");\n-      // Either returns namespace data or undefined\n-      expect(info === undefined || typeof info === \"object\").toBe(true);\n-    });\n+    it(\"should suggest similar namespaces\", async () => {\n+      const result = await lookupOtelSemantics(\n+        \"gen\",\n+        undefined,\n+        \"spans\",\n+        mockApiService,\n+        \"test-org\",\n+      );\n \n-    it(\"should get available namespaces\", () => {\n-      const namespaces = getAvailableNamespaces();\n-      expect(Array.isArray(namespaces)).toBe(true);\n+      expect(result).toContain(\"Did you mean:\");\n+      expect(result).toContain(\"gen_ai\");\n     });\n   });\n });"
    },
    {
      "filename": "packages/mcp-server/src/tools/search-events/tools/otel-semantics-lookup.ts",
      "patch": "@@ -1,148 +1,176 @@\n import type { SentryApiService } from \"../../../api-client\";\n-import { logError } from \"../../../logging\";\n-import { readFileSync, readdirSync } from \"node:fs\";\n-import { resolve, dirname } from \"node:path\";\n-import { fileURLToPath } from \"node:url\";\n-import { z } from \"zod\";\n-\n-const __filename = fileURLToPath(import.meta.url);\n-const __dirname = dirname(__filename);\n-\n-// Zod schemas for type-safe JSON parsing\n-const AttributeSchema = z.object({\n-  description: z.string(),\n-  type: z.string(),\n-  examples: z\n-    .array(z.any())\n-    .transform((arr) =>\n-      arr.map((v) => (Array.isArray(v) ? JSON.stringify(v) : v.toString())),\n-    )\n-    .optional(),\n-  note: z.string().optional(),\n-  stability: z.string().optional(),\n-});\n-\n-const NamespaceDataSchema = z.object({\n-  namespace: z.string(),\n-  description: z.string(),\n-  attributes: z.record(z.string(), AttributeSchema),\n-  custom: z.boolean().optional(),\n-});\n-\n-const NamespacesIndexSchema = z.object({\n-  generated: z.string(),\n-  totalNamespaces: z.number(),\n-  namespaces: z.array(\n-    z.object({\n-      namespace: z.string(),\n-      description: z.string(),\n-      custom: z.boolean().optional(),\n-    }),\n-  ),\n-});\n-\n-// TypeScript types inferred from Zod schemas\n-type NamespaceData = z.infer<typeof NamespaceDataSchema>;\n-type NamespacesIndex = z.infer<typeof NamespacesIndexSchema>;\n-\n-// Load all namespace data from JSON files\n-function loadNamespaceData(): Record<string, NamespaceData> {\n-  const dataDir = resolve(__dirname, \"data\");\n-  const namespaceData: Record<string, NamespaceData> = {};\n-\n-  try {\n-    const files = readdirSync(dataDir).filter(\n-      (f) => f.endsWith(\".json\") && f !== \"__namespaces.json\",\n-    );\n-\n-    for (const file of files) {\n-      const filePath = resolve(dataDir, file);\n-      try {\n-        const content = readFileSync(filePath, \"utf8\");\n-        const parsed = JSON.parse(content);\n-        const validated = NamespaceDataSchema.parse(parsed);\n-        namespaceData[validated.namespace] = validated;\n-      } catch (error) {\n-        console.warn(`Failed to load namespace file ${file}:`, error);\n-      }\n-    }\n-  } catch (error) {\n-    logError(error as Error, { context: { operation: \"loadNamespaceData\" } });\n-  }\n \n-  return namespaceData;\n-}\n+// Import all JSON files directly\n+import android from \"./data/android.json\";\n+import app from \"./data/app.json\";\n+import artifact from \"./data/artifact.json\";\n+import aspnetcore from \"./data/aspnetcore.json\";\n+import aws from \"./data/aws.json\";\n+import azure from \"./data/azure.json\";\n+import browser from \"./data/browser.json\";\n+import cassandra from \"./data/cassandra.json\";\n+import cicd from \"./data/cicd.json\";\n+import client from \"./data/client.json\";\n+import cloud from \"./data/cloud.json\";\n+import cloudevents from \"./data/cloudevents.json\";\n+import cloudfoundry from \"./data/cloudfoundry.json\";\n+import code from \"./data/code.json\";\n+import container from \"./data/container.json\";\n+import cpu from \"./data/cpu.json\";\n+import cpython from \"./data/cpython.json\";\n+import database from \"./data/database.json\";\n+import db from \"./data/db.json\";\n+import deployment from \"./data/deployment.json\";\n+import destination from \"./data/destination.json\";\n+import device from \"./data/device.json\";\n+import disk from \"./data/disk.json\";\n+import dns from \"./data/dns.json\";\n+import dotnet from \"./data/dotnet.json\";\n+import elasticsearch from \"./data/elasticsearch.json\";\n+import enduser from \"./data/enduser.json\";\n+import error from \"./data/error.json\";\n+import faas from \"./data/faas.json\";\n+import feature_flags from \"./data/feature_flags.json\";\n+import file from \"./data/file.json\";\n+import gcp from \"./data/gcp.json\";\n+import gen_ai from \"./data/gen_ai.json\";\n+import geo from \"./data/geo.json\";\n+import go from \"./data/go.json\";\n+import graphql from \"./data/graphql.json\";\n+import hardware from \"./data/hardware.json\";\n+import heroku from \"./data/heroku.json\";\n+import host from \"./data/host.json\";\n+import http from \"./data/http.json\";\n+import ios from \"./data/ios.json\";\n+import jvm from \"./data/jvm.json\";\n+import k8s from \"./data/k8s.json\";\n+import linux from \"./data/linux.json\";\n+import log from \"./data/log.json\";\n+import mcp from \"./data/mcp.json\";\n+import messaging from \"./data/messaging.json\";\n+import network from \"./data/network.json\";\n+import nodejs from \"./data/nodejs.json\";\n+import oci from \"./data/oci.json\";\n+import opentracing from \"./data/opentracing.json\";\n+import os from \"./data/os.json\";\n+import otel from \"./data/otel.json\";\n+import peer from \"./data/peer.json\";\n+import process from \"./data/process.json\";\n+import profile from \"./data/profile.json\";\n+import rpc from \"./data/rpc.json\";\n+import server from \"./data/server.json\";\n+import service from \"./data/service.json\";\n+import session from \"./data/session.json\";\n+import signalr from \"./data/signalr.json\";\n+import source from \"./data/source.json\";\n+import system from \"./data/system.json\";\n+import telemetry from \"./data/telemetry.json\";\n+import test from \"./data/test.json\";\n+import thread from \"./data/thread.json\";\n+import tls from \"./data/tls.json\";\n+import url from \"./data/url.json\";\n+import user from \"./data/user.json\";\n+import v8js from \"./data/v8js.json\";\n+import vcs from \"./data/vcs.json\";\n+import webengine from \"./data/webengine.json\";\n+import zos from \"./data/zos.json\";\n+\n+// Create the namespaceData object\n+const namespaceData: Record<string, NamespaceData> = {\n+  android,\n+  app,\n+  artifact,\n+  aspnetcore,\n+  aws,\n+  azure,\n+  browser,\n+  cassandra,\n+  cicd,\n+  client,\n+  cloud,\n+  cloudevents,\n+  cloudfoundry,\n+  code,\n+  container,\n+  cpu,\n+  cpython,\n+  database,\n+  db,\n+  deployment,\n+  destination,\n+  device,\n+  disk,\n+  dns,\n+  dotnet,\n+  elasticsearch,\n+  enduser,\n+  error,\n+  faas,\n+  feature_flags,\n+  file,\n+  gcp,\n+  gen_ai,\n+  geo,\n+  go,\n+  graphql,\n+  hardware,\n+  heroku,\n+  host,\n+  http,\n+  ios,\n+  jvm,\n+  k8s,\n+  linux,\n+  log,\n+  mcp,\n+  messaging,\n+  network,\n+  nodejs,\n+  oci,\n+  opentracing,\n+  os,\n+  otel,\n+  peer,\n+  process,\n+  profile,\n+  rpc,\n+  server,\n+  service,\n+  session,\n+  signalr,\n+  source,\n+  system,\n+  telemetry,\n+  test,\n+  thread,\n+  tls,\n+  url,\n+  user,\n+  v8js,\n+  vcs,\n+  webengine,\n+  zos,\n+};\n \n-// Cache the namespace data to avoid re-reading files\n-const NAMESPACE_DATA = loadNamespaceData();\n-\n-// Load the namespaces index\n-export function loadNamespacesIndex(): NamespacesIndex {\n-  const indexPath = resolve(__dirname, \"data\", \"__namespaces.json\");\n-  try {\n-    const content = readFileSync(indexPath, \"utf8\");\n-    const parsed = JSON.parse(content);\n-    return NamespacesIndexSchema.parse(parsed);\n-  } catch (error) {\n-    logError(error as Error, { context: { operation: \"loadNamespacesIndex\" } });\n-    // Return empty index if file doesn't exist or validation fails\n-    return {\n-      generated: new Date().toISOString(),\n-      totalNamespaces: 0,\n-      namespaces: [],\n-    };\n-  }\n+// TypeScript types\n+interface NamespaceData {\n+  namespace: string;\n+  description: string;\n+  attributes: Record<\n+    string,\n+    {\n+      description: string;\n+      type: string;\n+      examples?: Array<any>;\n+      note?: string;\n+      stability?: string;\n+    }\n+  >;\n+  custom?: boolean;\n }\n \n-// Map common query terms to OpenTelemetry semantic conventions\n-const SEMANTIC_MAPPINGS: Record<string, string> = {\n-  agent: \"gen_ai\",\n-  ai: \"gen_ai\",\n-  llm: \"gen_ai\",\n-  model: \"gen_ai\",\n-  anthropic: \"gen_ai\",\n-  openai: \"gen_ai\",\n-  claude: \"gen_ai\",\n-  database: \"db\",\n-  db: \"db\",\n-  sql: \"db\",\n-  query: \"db\",\n-  postgresql: \"db\",\n-  mysql: \"db\",\n-  redis: \"db\",\n-  mongodb: \"db\",\n-  http: \"http\",\n-  api: \"http\",\n-  request: \"http\",\n-  response: \"http\",\n-  get: \"http\",\n-  post: \"http\",\n-  tool: \"mcp\",\n-  \"tool calls\": \"mcp\",\n-  \"tool call\": \"mcp\",\n-  mcp: \"mcp\",\n-  rpc: \"rpc\",\n-  grpc: \"rpc\",\n-  messaging: \"messaging\",\n-  queue: \"messaging\",\n-  kafka: \"messaging\",\n-  rabbitmq: \"messaging\",\n-  k8s: \"k8s\",\n-  kubernetes: \"k8s\",\n-  container: \"container\",\n-  docker: \"container\",\n-  pod: \"k8s\",\n-  cloud: \"cloud\",\n-  aws: \"aws\",\n-  azure: \"azure\",\n-  gcp: \"gcp\",\n-  network: \"network\",\n-  tcp: \"network\",\n-  udp: \"network\",\n-};\n-\n /**\n- * Look up all attributes for a specific OpenTelemetry namespace\n+ * Lookup OpenTelemetry semantic convention attributes for a given namespace\n  */\n export async function lookupOtelSemantics(\n   namespace: string,\n@@ -152,56 +180,72 @@ export async function lookupOtelSemantics(\n   organizationSlug: string,\n   projectId?: string,\n ): Promise<string> {\n-  try {\n-    // Get namespace data\n-    const namespaceData = NAMESPACE_DATA[namespace];\n-    if (!namespaceData) {\n-      return `Namespace '${namespace}' not found. Available namespaces: ${Object.keys(NAMESPACE_DATA).slice(0, 10).join(\", \")}...`;\n-    }\n+  // Normalize namespace (replace - with _)\n+  const normalizedNamespace = namespace.replace(/-/g, \"_\");\n+\n+  // Check if namespace exists\n+  const data = namespaceData[normalizedNamespace];\n+  if (!data) {\n+    // Try to find similar namespaces\n+    const allNamespaces = Object.keys(namespaceData);\n+    const suggestions = allNamespaces\n+      .filter((ns) => ns.includes(namespace) || namespace.includes(ns))\n+      .slice(0, 3);\n+\n+    return suggestions.length > 0\n+      ? `Namespace '${namespace}' not found. Did you mean: ${suggestions.join(\", \")}?`\n+      : `Namespace '${namespace}' not found. Use 'list' to see all available namespaces.`;\n+  }\n \n-    // Format attribute information\n-    const attributes = Object.entries(namespaceData.attributes);\n-    const attributeInfo = attributes\n-      .slice(0, 20) // Limit to first 20 attributes\n-      .map(([name, info]) => {\n-        let desc = `${name}: ${info.description}`;\n-        if (info.type !== \"string\") {\n-          desc += ` (${info.type})`;\n-        }\n-        if (info.examples && info.examples.length > 0) {\n-          desc += ` - examples: ${info.examples.slice(0, 3).join(\", \")}`;\n-        }\n-        return desc;\n-      })\n-      .join(\"\\n\");\n-\n-    const hasPattern = `has:${namespace}.*`;\n-    const totalAttrs = attributes.length;\n-\n-    return `Namespace: ${namespace}\n-Description: ${namespaceData.description}\n-Total attributes: ${totalAttrs}\n-Query pattern: ${hasPattern}\n-\n-Common attributes:\n-${attributeInfo}\n-\n-${totalAttrs > 20 ? `... and ${totalAttrs - 20} more attributes` : \"\"}`;\n-  } catch (error) {\n-    return `Error looking up namespace '${namespace}'. Use standard OpenTelemetry conventions.`;\n+  // Format the response\n+  let response = `# OpenTelemetry Semantic Conventions: ${data.namespace}\\n\\n`;\n+  response += `${data.description}\\n\\n`;\n+\n+  if (data.custom) {\n+    response +=\n+      \"**Note:** This is a custom namespace, not part of standard OpenTelemetry conventions.\\n\\n\";\n   }\n-}\n \n-/**\n- * Get detailed information about a specific namespace\n- */\n-export function getNamespaceInfo(namespace: string): NamespaceData | undefined {\n-  return NAMESPACE_DATA[namespace];\n-}\n+  // Filter attributes if searchTerm is provided\n+  let attributes = Object.entries(data.attributes);\n+  if (searchTerm) {\n+    const lowerSearch = searchTerm.toLowerCase();\n+    attributes = attributes.filter(\n+      ([key, attr]) =>\n+        key.toLowerCase().includes(lowerSearch) ||\n+        attr.description.toLowerCase().includes(lowerSearch),\n+    );\n+  }\n \n-/**\n- * Get all available namespaces\n- */\n-export function getAvailableNamespaces(): string[] {\n-  return Object.keys(NAMESPACE_DATA);\n+  response += `## Attributes (${attributes.length} ${searchTerm ? \"matching\" : \"total\"})\\n\\n`;\n+\n+  // Sort attributes by key\n+  const sortedAttributes = attributes.sort(([a], [b]) => a.localeCompare(b));\n+\n+  for (const [key, attr] of sortedAttributes) {\n+    response += `### \\`${key}\\`\\n`;\n+    response += `- **Type:** ${attr.type}\\n`;\n+    response += `- **Description:** ${attr.description}\\n`;\n+\n+    if (attr.stability) {\n+      response += `- **Stability:** ${attr.stability}\\n`;\n+    }\n+\n+    if (attr.examples && attr.examples.length > 0) {\n+      response += `- **Examples:** ${attr.examples\n+        .map(\n+          (ex) =>\n+            `\\`${typeof ex === \"object\" ? JSON.stringify(ex) : String(ex)}\\``,\n+        )\n+        .join(\", \")}\\n`;\n+    }\n+\n+    if (attr.note) {\n+      response += `- **Note:** ${attr.note}\\n`;\n+    }\n+\n+    response += \"\\n\";\n+  }\n+\n+  return response;\n }"
    },
    {
      "filename": "pnpm-lock.yaml",
      "patch": "@@ -215,6 +215,10 @@ importers:\n       vitest-evals:\n         specifier: 'catalog:'\n         version: 0.4.0(tinyrainbow@2.0.0)(vitest@3.2.4(@types/debug@4.1.12)(@types/node@22.16.0)(jiti@2.4.2)(lightningcss@1.30.1)(msw@2.10.2(@types/node@22.16.0)(typescript@5.8.3))(tsx@4.20.3)(yaml@2.8.0))\n+    devDependencies:\n+      '@types/json-schema':\n+        specifier: ^7.0.15\n+        version: 7.0.15\n \n   packages/mcp-cloudflare:\n     dependencies:\n@@ -2067,6 +2071,9 @@ packages:\n   '@types/hast@3.0.4':\n     resolution: {integrity: sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==}\n \n+  '@types/json-schema@7.0.15':\n+    resolution: {integrity: sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==}\n+\n   '@types/linkify-it@5.0.0':\n     resolution: {integrity: sha512-sVDA58zAw4eWAffKOaQH5/5j3XeayukzDk+ewSsnv3p4yJEZHCCzMDiZM8e0OUrRvmpGZ85jf4yDHkHsgBNr9Q==}\n \n@@ -6171,6 +6178,8 @@ snapshots:\n     dependencies:\n       '@types/unist': 3.0.3\n \n+  '@types/json-schema@7.0.15': {}\n+\n   '@types/linkify-it@5.0.0': {}\n \n   '@types/markdown-it@14.1.2':"
    }
  ],
  "context": {
    "title": "fix: bundle OpenTelemetry data at build time for Cloudflare Workers compatibility",
    "description": "## Summary\n\nThis PR fixes Cloudflare Workers deployment errors and improves the codebase by bundling OpenTelemetry data at build time and adding proper TypeScript types for tool definitions.\n\n### Changes\n\n**Bug Fixes:**\n- Bundle OpenTelemetry namespace data at build time to avoid Node.js file system APIs in Cloudflare Workers\n- Fix namespace key generation to replace all hyphens (not just the first) for consistent lookups\n- Remove unnecessary type annotations where TypeScript can infer types\n\n**Features:**\n- Add native TypeScript types for tool definitions, eliminating type casting in the UI\n- Simplify toolDefinitions.json to only include fields needed by the UI (36% size reduction)\n\n**Refactoring:**\n- Clean up misleading comments that don't match the atomic nature of changes\n- Remove unused experimental tool definition generator scripts with poor naming\n- Improve code organization with cleaner type definitions\n\n### Technical Details\n\nThe main issue was that `otel-semantics-lookup` was using Node.js file system APIs (`readFileSync`, `readdirSync`) which don't work in Cloudflare Workers. We fixed this by:\n\n1. Creating a build script that bundles all 73 OpenTelemetry namespace JSON files into a single TypeScript module\n2. Refactoring the lookup module to import pre-generated data instead of reading files at runtime\n3. Using npm lifecycle hooks (`prebuild`/`postbuild`) for better build process organization\n\nAdditionally, we improved type safety by generating a typed `toolDefinitions.ts` module alongside the JSON file, and simplified the JSON structure to only include what the UI actually uses (name, description, and parameter descriptions).\n\n---\n*This PR was created with Claude Code*",
    "commitMessages": [
      "fix: bundle OpenTelemetry data at build time for Cloudflare Workers compatibility\n\nThe otel-semantics-lookup module was using Node.js file system APIs that don't work in Cloudflare Workers. This change:\n\n- Adds a build script to bundle all OTel namespace JSON files into a single TypeScript module\n- Refactors the lookup module to import the bundled data instead of reading files at runtime\n- Updates build process to use prebuild/postbuild hooks for cleaner dependency management\n- Removes unnecessary pretest hook since tests don't use tool definitions\n- Updates tests to use actual generated bundle instead of mocks\n\nThis fixes the deployment error: \"The 'path' argument must be of type string or an instance of URL. Received undefined\"\n\nNote: While @rollup/plugin-json would be a cleaner approach, the current solution with generated bundles works well and avoids the need to manually maintain a barrel export file for 73 JSON files.",
      "fix: use tsdown JSON bundling for Cloudflare Workers compatibility\n\n- Replace file system operations in otel-semantics-lookup with direct JSON imports\n- Remove complex loading functions, Zod parsing, and caching (JSON imports are type-safe)\n- Update generate-tool-definitions to output JSON and run as prebuild\n- Add TypeScript wrapper for toolDefinitions to ensure proper bundling\n- Remove obsolete generate-otel-data-bundle script\n- Update package.json exports to point to correct bundled files\n\nThis fixes Cloudflare Workers deployment by eliminating Node.js-specific APIs\nand leveraging tsdown/rolldown's built-in JSON support.",
      "fix: add proper TypeScript types for tool definitions\n\n- Add ToolDefinition and ToolParameter interfaces to toolDefinitions.ts\n- Fix type errors in mcp-cloudflare home.tsx by using proper types\n- Fix OpenTelemetry examples display to handle complex types via JSON.stringify\n- Fix lint errors in script files by using node: protocol\n\nGenerated with Claude Code",
      "fix: remove unnecessary type annotations in home.tsx\n\nTOOL_DEFINITIONS is already properly typed from the import, so explicit type annotations in sort() and map() callbacks are redundant.",
      "chore: remove unused experimental tool definition generator scripts\n\nThese were created during TypeScript generation experiments but are not\nbeing used. Only generate-tool-definitions.ts is actually referenced in\npackage.json scripts.",
      "fix: remove unused type imports in home.tsx\n\nSince we no longer use explicit type annotations, the ToolDefinition and\nToolParameter type imports are unnecessary.",
      "fix: clean up misleading comments\n\n- Remove TypeScript mention from generate-tool-definitions.ts (this PR is about bundling for Cloudflare)\n- Remove unnecessary comments about re-exporting and typing in toolDefinitions.ts\n- Simplify the examples mapping code in otel-semantics-lookup.ts",
      "feat: add Zod validation for toolDefinitions.json\n\n- Use Zod schemas to parse and validate toolDefinitions.json at runtime\n- Replace manual TypeScript interfaces with z.infer for type safety\n- Add safeParse with clear error messages for better debugging\n- Export schemas for potential reuse in other parts of the codebase\n\nThis ensures the JSON structure matches our expected types and catches\nany mismatches at build time rather than runtime.",
      "refactor: use @types/json-schema for tool definitions\n\n- Replace complex Zod validation with proper JSON Schema v7 types\n- Use type assertion since we trust the build process generates valid data\n- Much cleaner and more maintainable approach\n- Addresses feedback about the previous implementation being \"disgusting\"",
      "fix: replace all hyphens in namespace names for consistent lookups\n\nThe Cursor BugBot correctly identified that namespace.replace('-', '_') only\nreplaces the first hyphen. This could cause lookup failures for namespaces\nwith multiple hyphens (e.g., 'feature-flags-test' would become\n'feature_flags-test' but lookup expects 'feature_flags_test').\n\nFixed by using replace(/-/g, '_') to replace all hyphens.",
      "refactor: simplify toolDefinitions.json to only include UI-needed fields\n\nThe UI only uses name, description, and parameter descriptions. Removed\nunnecessary JSON Schema fields like $schema, anyOf, type, etc. This\nreduces the file size by 36% (from ~47K to ~30K) and makes the structure\nmuch cleaner.\n\n- Simplified ToolParameter interface to only include description\n- Updated generation script to extract only descriptions\n- Removed dependency on @types/json-schema",
      "chore: remove generated toolDefinitions.json from source control\n\nThis file is auto-generated during the prebuild step and shouldn't be\ntracked in git. It's already listed in .gitignore but was previously\ncommitted. Since the build process is required before tests/publish,\nthere's no need to track this generated file."
    ]
  },
  "metadata": {
    "isAI": true,
    "tool": "Claude Code",
    "addedBy": "dcramer",
    "addedAt": "2025-07-19T22:53:12.622Z"
  }
}
